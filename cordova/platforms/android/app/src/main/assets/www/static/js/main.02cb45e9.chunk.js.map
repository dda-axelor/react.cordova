{"version":3,"sources":["pages/home.js","pages/about.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","React","Component","About","error","info","console","log","name","Error","JSON","stringify","setState","hasError","App","myRef","createRef","nowPage","full_Height","window","innerHeight","bezy","media","MusicControls","cordova","document","addEventListener","e","closeOrBack","_this2","dist_default","height","myComponentApp","onChangePage","nowPageKey","homePageKey","home_Home","key","levelPage","about_About","style","className","id","width","onClick","navigator","changePage","Boolean","location","hostname","match","startApp","cordovaWork","ReactDOM","render","App_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02cb45e9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Home extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      //myChildrens: false\r\n    }\r\n\r\n  }\r\n\r\n\r\n  componentWillMount() {\r\n  }\r\n\r\n  render() {\r\n    const fthis = this;\r\n    return (\r\n    <div>  <h1>\r\n        home page\r\n      </h1>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      <h2>hghgfhfg</h2>\r\n      <br/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport default class About extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n        console.log(\r\n            'class component error at:' + this.name\r\n            , new Error()\r\n            , 'error message:', JSON.stringify(error)\r\n            , 'info message:', JSON.stringify(info));\r\n        this.setState({ hasError: true });\r\n        // logErrorToMyService(error, info);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n  //      const fthis = this;\r\n\r\n        return (\r\n            <div>  <h1>\r\n            About page\r\n          </h1>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          <h2>hghgfhfg</h2>\r\n          <br/>\r\n          </div>\r\n            )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Navigator from 'react.cordova-navigation_controller';\r\n\r\n//----Pages----//\r\nimport Home from \"./pages/home\";\r\nimport About from \"./pages/about\";\r\n\r\n//import { ErrorConnection } from './error';\r\n\r\n//----style----//\r\n//---//\r\n//\"style.css\" it's important style to mobile view (android ios); \r\nimport \"./css/style.css\";\r\n//---//\r\n\r\nexport default class App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.myRef = React.createRef();\r\n\r\n    this.state = {\r\n      nowPage: \"home\"\r\n    }\r\n\r\n    // this.nowPage=\"\"; //it's will fill from NavigatorPages\r\n\r\n    this.full_Height = window.innerHeight;\r\n\r\n\r\n    this.bezy = false;\r\n\r\n\r\n    this.media = null;\r\n    this.MusicControls = null;\r\n\r\n    //  this.playPause = this.playPause.bind(this);\r\n\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    //debugger\r\n\r\n  }\r\n\r\n  componentWillMount() {\r\n\r\n    if (window.cordova) {\r\n\r\n      // //---lock portrait\r\n      // window.screen.orientation.lock('portrait');\r\n\r\n      //--back button in android\r\n      document.addEventListener(\"backbutton\"\r\n        , (e) => {\r\n          window.closeOrBack();\r\n        }\r\n        , false);\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const fthis = this;\r\n\r\n    //const full_Height = window.innerHeight;\r\n\r\n    return (\r\n      [<Navigator\r\n        height=\"92%\"\r\n        myComponentApp={this}\r\n        onChangePage={(nowPageKey) => { this.setState({ nowPage: nowPageKey }); }}\r\n        homePageKey={\"home\"}>\r\n        <Home key=\"home\" levelPage={0} />\r\n        <About key=\"about\" levelPage={1} />\r\n      </Navigator>\r\n\r\n\r\n        , <div style={{ height: \"8%\" }} className=\"navbar\" id=\"myNavbar\">\r\n\r\n        <div style={{ width: \"50%\" }}\r\n          onClick={() => { this.navigator.changePage(\"home\") }}\r\n          className={this.state.nowPage === \"home\" ? \"active\" : \"\"}>Home</div>\r\n\r\n        <div style={{ width: \"50%\" }}\r\n          onClick={() => {\r\n            this.navigator.changePage(\"about\");\r\n          }}\r\n          className={this.state.nowPage === \"about\" ? \"active\" : \"\"}>About</div>\r\n\r\n      </div>\r\n      ]\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n//window.appVersion = \"0.0.1\";\r\n\r\n\r\nconst startApp = (cordovaWork) => {\r\n  ReactDOM.render(\r\n    <div>\r\n      <App cordovaWork={cordovaWork} />\r\n    </div>,\r\n    document.getElementById('root')\r\n  );\r\n}\r\n\r\nif (!window.cordova) {\r\n  startApp(false)\r\n} else {\r\n\r\n  document.addEventListener('deviceready', () => {\r\n    startApp(true);\r\n  }, false);\r\n  // alert(deevice.cordova);\r\n\r\n  // window.device && device.platform === 'iOS'? \r\n  //  alert(window.device.platform);\r\n  // alert(window.cordova);\r\n  //  alert(JSON.stringify(window.cordova));\r\n}\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}